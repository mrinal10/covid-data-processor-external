plugins {
    id 'org.springframework.boot' version '2.4.4'
    id 'org.sonarqube' version '3.1.1'
    id 'jacoco'
    id 'nu.studer.jooq' version '5.2.1'
}

apply from: 'libraries.gradle'

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'io.spring.dependency-management'

group = 'co.homelane'
version = '1.0-SNAPSHOT'

sourceCompatibility = 8
targetCompatibility = 8

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()

}

dependencyManagement {
    imports {
        mavenBom 'org.springframework.cloud:spring-cloud-dependencies:2020.0.1'
    }
}

// Replace version suggested by Spring Boot with version we use to generate code.
// https://github.com/etiennestuder/gradle-jooq-plugin/blob/master/README.md#defining-the-jooq-version-when-the-spring-boot-plugin-is-applied
ext['jooq.version'] = ext['jooqVersion']

dependencies {
    // Lombok
    compileOnly "org.projectlombok:lombok"
    annotationProcessor "org.projectlombok:lombok"

    // Spring dependencies
    implementation(libraries.springBootStarterWeb)
    implementation(libraries.springBootActuator)
    implementation(libraries.springFoxStarter)
    implementation(libraries.springCloudAwsMessaging)
    implementation(libraries.springCloudOpenFeign)
    implementation(libraries.openfeignHttpClient)
    implementation(libraries.openfeignCore)
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // Tide dependencies
    implementation(libraries.guava)

    // ApiDocs dependencies
    implementation(libraries.swagger)

    // Test
    testImplementation(libraries.springBootStarterTest)
    testImplementation(libraries.jUnit5Api)
    testRuntimeOnly(libraries.jUnit5Engine)
    testRuntimeOnly(libraries.jUnit5Params)
    testImplementation(libraries.mockitoJunit5)
    testImplementation(libraries.wiremock)
    implementation 'org.springframework.boot:spring-boot-starter-security:2.5.2'


}

jacocoTestReport {
    executionData.setFrom(fileTree("$buildDir/jacoco/").include("**.exec"))
    classDirectories.setFrom(files(project.sourceSets.main.output))

    reports {
        html.enabled = true
        xml.enabled = true
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: 'co/homelane/db/jooq/**')
        }))
    }
}

sonarqube {
    def sonarExclusions = "src/generated-db-entities/**, src/main/java/co/tide/homelane/config/**, src/main/java/co/tide/homelane/security/annotations/**, src/main/java/co/tide/marketplace/adapter/security/Roles.java"
    properties {
        property "sonar.coverage.jacoco.xmlReportPaths", "$buildDir/reports/jacoco/test/jacocoTestReport.xml"
        property "sonar.exclusions", "${sonarExclusions}"
    }
}

task unitTest(type: Test) {
    useJUnitPlatform {
        include '**/*UTest.class'
    }
    failFast = true
}

task integrationTest(type: Test) {
    useJUnitPlatform {
        include '**/*ITest.class'
    }
    failFast = true
}

task apiTest(type: Test) {
    useJUnitPlatform {
        include '**/*ApiTest.class'
    }
    failFast = true
}

bootRun {
    // The profile can be passed as ./gradlew clean bootRun -Dspring.profiles.active=dev
    systemProperties['spring.profiles.active'] = project.gradle.startParameter.systemPropertiesArgs['spring.profiles.active']
}


