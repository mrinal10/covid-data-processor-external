/*
 * This file is generated by jOOQ.
 */
package co.homelane.db.jooq.tables.pojos;


import java.io.Serializable;
import java.time.LocalDateTime;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Statewisetestingdetails implements Serializable {

    private static final long serialVersionUID = 1L;

    private LocalDateTime date;
    private String        state;
    private Double        totalsamples;
    private Integer       negative;
    private Double        positive;

    public Statewisetestingdetails() {}

    public Statewisetestingdetails(Statewisetestingdetails value) {
        this.date = value.date;
        this.state = value.state;
        this.totalsamples = value.totalsamples;
        this.negative = value.negative;
        this.positive = value.positive;
    }

    public Statewisetestingdetails(
        LocalDateTime date,
        String        state,
        Double        totalsamples,
        Integer       negative,
        Double        positive
    ) {
        this.date = date;
        this.state = state;
        this.totalsamples = totalsamples;
        this.negative = negative;
        this.positive = positive;
    }

    /**
     * Getter for <code>statewisetestingdetails.date</code>.
     */
    public LocalDateTime getDate() {
        return this.date;
    }

    /**
     * Setter for <code>statewisetestingdetails.date</code>.
     */
    public Statewisetestingdetails setDate(LocalDateTime date) {
        this.date = date;
        return this;
    }

    /**
     * Getter for <code>statewisetestingdetails.state</code>.
     */
    public String getState() {
        return this.state;
    }

    /**
     * Setter for <code>statewisetestingdetails.state</code>.
     */
    public Statewisetestingdetails setState(String state) {
        this.state = state;
        return this;
    }

    /**
     * Getter for <code>statewisetestingdetails.totalsamples</code>.
     */
    public Double getTotalsamples() {
        return this.totalsamples;
    }

    /**
     * Setter for <code>statewisetestingdetails.totalsamples</code>.
     */
    public Statewisetestingdetails setTotalsamples(Double totalsamples) {
        this.totalsamples = totalsamples;
        return this;
    }

    /**
     * Getter for <code>statewisetestingdetails.negative</code>.
     */
    public Integer getNegative() {
        return this.negative;
    }

    /**
     * Setter for <code>statewisetestingdetails.negative</code>.
     */
    public Statewisetestingdetails setNegative(Integer negative) {
        this.negative = negative;
        return this;
    }

    /**
     * Getter for <code>statewisetestingdetails.positive</code>.
     */
    public Double getPositive() {
        return this.positive;
    }

    /**
     * Setter for <code>statewisetestingdetails.positive</code>.
     */
    public Statewisetestingdetails setPositive(Double positive) {
        this.positive = positive;
        return this;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final Statewisetestingdetails other = (Statewisetestingdetails) obj;
        if (date == null) {
            if (other.date != null)
                return false;
        }
        else if (!date.equals(other.date))
            return false;
        if (state == null) {
            if (other.state != null)
                return false;
        }
        else if (!state.equals(other.state))
            return false;
        if (totalsamples == null) {
            if (other.totalsamples != null)
                return false;
        }
        else if (!totalsamples.equals(other.totalsamples))
            return false;
        if (negative == null) {
            if (other.negative != null)
                return false;
        }
        else if (!negative.equals(other.negative))
            return false;
        if (positive == null) {
            if (other.positive != null)
                return false;
        }
        else if (!positive.equals(other.positive))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.date == null) ? 0 : this.date.hashCode());
        result = prime * result + ((this.state == null) ? 0 : this.state.hashCode());
        result = prime * result + ((this.totalsamples == null) ? 0 : this.totalsamples.hashCode());
        result = prime * result + ((this.negative == null) ? 0 : this.negative.hashCode());
        result = prime * result + ((this.positive == null) ? 0 : this.positive.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Statewisetestingdetails (");

        sb.append(date);
        sb.append(", ").append(state);
        sb.append(", ").append(totalsamples);
        sb.append(", ").append(negative);
        sb.append(", ").append(positive);

        sb.append(")");
        return sb.toString();
    }
}
