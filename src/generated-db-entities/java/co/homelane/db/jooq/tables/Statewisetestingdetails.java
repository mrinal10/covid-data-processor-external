/*
 * This file is generated by jOOQ.
 */
package co.homelane.db.jooq.tables;


import co.homelane.db.jooq.DefaultSchema;
import co.homelane.db.jooq.tables.records.StatewisetestingdetailsRecord;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Statewisetestingdetails extends TableImpl<StatewisetestingdetailsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>statewisetestingdetails</code>
     */
    public static final Statewisetestingdetails STATEWISETESTINGDETAILS = new Statewisetestingdetails();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StatewisetestingdetailsRecord> getRecordType() {
        return StatewisetestingdetailsRecord.class;
    }

    /**
     * The column <code>statewisetestingdetails.date</code>.
     */
    public final TableField<StatewisetestingdetailsRecord, LocalDateTime> DATE = createField(DSL.name("date"), SQLDataType.LOCALDATETIME(3).nullable(false), this, "");

    /**
     * The column <code>statewisetestingdetails.state</code>.
     */
    public final TableField<StatewisetestingdetailsRecord, String> STATE = createField(DSL.name("state"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>statewisetestingdetails.totalsamples</code>.
     */
    public final TableField<StatewisetestingdetailsRecord, Double> TOTALSAMPLES = createField(DSL.name("totalsamples"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>statewisetestingdetails.negative</code>.
     */
    public final TableField<StatewisetestingdetailsRecord, Integer> NEGATIVE = createField(DSL.name("negative"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>statewisetestingdetails.positive</code>.
     */
    public final TableField<StatewisetestingdetailsRecord, Double> POSITIVE = createField(DSL.name("positive"), SQLDataType.DOUBLE, this, "");

    private Statewisetestingdetails(Name alias, Table<StatewisetestingdetailsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Statewisetestingdetails(Name alias, Table<StatewisetestingdetailsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>statewisetestingdetails</code> table reference
     */
    public Statewisetestingdetails(String alias) {
        this(DSL.name(alias), STATEWISETESTINGDETAILS);
    }

    /**
     * Create an aliased <code>statewisetestingdetails</code> table reference
     */
    public Statewisetestingdetails(Name alias) {
        this(alias, STATEWISETESTINGDETAILS);
    }

    /**
     * Create a <code>statewisetestingdetails</code> table reference
     */
    public Statewisetestingdetails() {
        this(DSL.name("statewisetestingdetails"), null);
    }

    public <O extends Record> Statewisetestingdetails(Table<O> child, ForeignKey<O, StatewisetestingdetailsRecord> key) {
        super(child, key, STATEWISETESTINGDETAILS);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Statewisetestingdetails as(String alias) {
        return new Statewisetestingdetails(DSL.name(alias), this);
    }

    @Override
    public Statewisetestingdetails as(Name alias) {
        return new Statewisetestingdetails(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Statewisetestingdetails rename(String name) {
        return new Statewisetestingdetails(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Statewisetestingdetails rename(Name name) {
        return new Statewisetestingdetails(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<LocalDateTime, String, Double, Integer, Double> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
