/*
 * This file is generated by jOOQ.
 */
package co.homelane.db.jooq.tables.records;


import co.homelane.db.jooq.tables.Statewisetestingdetails;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.Record5;
import org.jooq.Row5;
import org.jooq.impl.TableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StatewisetestingdetailsRecord extends TableRecordImpl<StatewisetestingdetailsRecord> implements Record5<LocalDateTime, String, Double, Integer, Double> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>statewisetestingdetails.date</code>.
     */
    public StatewisetestingdetailsRecord setDate(LocalDateTime value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>statewisetestingdetails.date</code>.
     */
    public LocalDateTime getDate() {
        return (LocalDateTime) get(0);
    }

    /**
     * Setter for <code>statewisetestingdetails.state</code>.
     */
    public StatewisetestingdetailsRecord setState(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>statewisetestingdetails.state</code>.
     */
    public String getState() {
        return (String) get(1);
    }

    /**
     * Setter for <code>statewisetestingdetails.totalsamples</code>.
     */
    public StatewisetestingdetailsRecord setTotalsamples(Double value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>statewisetestingdetails.totalsamples</code>.
     */
    public Double getTotalsamples() {
        return (Double) get(2);
    }

    /**
     * Setter for <code>statewisetestingdetails.negative</code>.
     */
    public StatewisetestingdetailsRecord setNegative(Integer value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>statewisetestingdetails.negative</code>.
     */
    public Integer getNegative() {
        return (Integer) get(3);
    }

    /**
     * Setter for <code>statewisetestingdetails.positive</code>.
     */
    public StatewisetestingdetailsRecord setPositive(Double value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>statewisetestingdetails.positive</code>.
     */
    public Double getPositive() {
        return (Double) get(4);
    }

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row5<LocalDateTime, String, Double, Integer, Double> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    @Override
    public Row5<LocalDateTime, String, Double, Integer, Double> valuesRow() {
        return (Row5) super.valuesRow();
    }

    @Override
    public Field<LocalDateTime> field1() {
        return Statewisetestingdetails.STATEWISETESTINGDETAILS.DATE;
    }

    @Override
    public Field<String> field2() {
        return Statewisetestingdetails.STATEWISETESTINGDETAILS.STATE;
    }

    @Override
    public Field<Double> field3() {
        return Statewisetestingdetails.STATEWISETESTINGDETAILS.TOTALSAMPLES;
    }

    @Override
    public Field<Integer> field4() {
        return Statewisetestingdetails.STATEWISETESTINGDETAILS.NEGATIVE;
    }

    @Override
    public Field<Double> field5() {
        return Statewisetestingdetails.STATEWISETESTINGDETAILS.POSITIVE;
    }

    @Override
    public LocalDateTime component1() {
        return getDate();
    }

    @Override
    public String component2() {
        return getState();
    }

    @Override
    public Double component3() {
        return getTotalsamples();
    }

    @Override
    public Integer component4() {
        return getNegative();
    }

    @Override
    public Double component5() {
        return getPositive();
    }

    @Override
    public LocalDateTime value1() {
        return getDate();
    }

    @Override
    public String value2() {
        return getState();
    }

    @Override
    public Double value3() {
        return getTotalsamples();
    }

    @Override
    public Integer value4() {
        return getNegative();
    }

    @Override
    public Double value5() {
        return getPositive();
    }

    @Override
    public StatewisetestingdetailsRecord value1(LocalDateTime value) {
        setDate(value);
        return this;
    }

    @Override
    public StatewisetestingdetailsRecord value2(String value) {
        setState(value);
        return this;
    }

    @Override
    public StatewisetestingdetailsRecord value3(Double value) {
        setTotalsamples(value);
        return this;
    }

    @Override
    public StatewisetestingdetailsRecord value4(Integer value) {
        setNegative(value);
        return this;
    }

    @Override
    public StatewisetestingdetailsRecord value5(Double value) {
        setPositive(value);
        return this;
    }

    @Override
    public StatewisetestingdetailsRecord values(LocalDateTime value1, String value2, Double value3, Integer value4, Double value5) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached StatewisetestingdetailsRecord
     */
    public StatewisetestingdetailsRecord() {
        super(Statewisetestingdetails.STATEWISETESTINGDETAILS);
    }

    /**
     * Create a detached, initialised StatewisetestingdetailsRecord
     */
    public StatewisetestingdetailsRecord(LocalDateTime date, String state, Double totalsamples, Integer negative, Double positive) {
        super(Statewisetestingdetails.STATEWISETESTINGDETAILS);

        setDate(date);
        setState(state);
        setTotalsamples(totalsamples);
        setNegative(negative);
        setPositive(positive);
    }
}
